extends _layout

block prepend header
  - var currentSection = 'code';

block content
  .l-section
    h1.primary-docs-headline Code Styles

    .doc-section
      h2.secondary-headline.doc-headline Modular CSS

      p The style sheets have been structured with modularity in mind to make it easy to add new features and components while ensuring the code base is easy to maintain over time. The structure has borrowed a lot from <a href="http://snook.ca/">Jonathan Snook's</a> <a href="http://smacss.com/" title="Scalable and Modular CSS">SMACSS</a> (Scalable and Modular CSS) approach. The stylesheets are broken down into four main sections:

      h3.tertiary-headline Base

      p #[strong Base] styles are the foundation of the site. In this directory you will find the following:
       
      .highlight
        table.table.table--demo
          tbody
            tr
              td 
                strong External Files
              td References to the mixin library, #[a(href="http://bourbon.io/") Bourbon], #[a(href="http://necolas.github.io/normalize.css/") Normalize] which takes the place of a traditional reset.
            tr
              td
                code.code _base.scss
              td Style sheet where styles are applied to an element using the element selector.
            tr
              td 
                code.code _settings.scss
              td This stylesheet includes site-wide the colors, fonts, etc.
            tr
              td 
                code.code _helpers.scss
              td This is where you can place any Sass mixins, functions or extends that are outside the scope of Bourbon.
            tr
              td 
                code.code _content.scss
              td This is where universal text and content styles reside.

      h3.tertiary-headline Layout

      p The layout styles are just that, they determine how main sections of the page are structured. Within this directory there are:

      .highlight
        table.table--demo
          tbody
            tr
              td
                code.code _layout.scss
              td This stylesheet is where the main container styles are stored such as #[code.code .l-container], #[code.code header], #[code.code footer], etc.
            tr
              td 
                code.code _grid.scss
              td The grid, which is discussed in detail in the #[a(href="layout.html") layout] section of this guide can be changed to whatever is required by adjusting the variables at the top of the file. The calculations to build the grid are done through Sass.

      h3.tertiary-headline Modules

      p Modules are discrete components of the page, such as navigation, alert dialogs, the photo viewer, etc. This section of the CSS is where you will most likely spend most of your time. Any new features, design elements, components will be added to this section.

      h3.tertiary-headline States

      p State, as defined by SMACSS, augments and overrides all other styles. This section at the moment only contains styles that control the display state of an element such as whether or not is is hidden #[code.code .is-hidden] or is visible #[code.code .is-visible]. These can be expanded to also contain states such as whether an element is expanded or collapsed, or if the element is in an error state.

    .doc-section
      h2.secondary-headline.doc-headline BEM
      p When creating new styles it is best to employ the BEM methodology.

      blockquote
        p BEM – meaning block, element, modifier – is a front-end naming methodology thought up by the guys at Yandex. It is a smart way of naming your CSS classes to give them more transparency and meaning to other developers. #[a(href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/") Harry Roberts of CSS Wizardry]

      p As stated by Harry Roberts in his article #[a(href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/") MindBEMding]:</p>

      ul
        li #[code.code .block] represents the higher level of an abstraction or component.
        li #[code.code .block__element] represents a descendent of .block that helps form .block as a whole.
        li #[code.code .block--modifier] represents a different state or version of .block.

      p Styles should be broken down in this pattern. Here is an example of a module we'll call #[em widget]:
      p The main styles that control the widget will be attached to the root: #[code.code widget].
      p If the widget module contains any custom element styles such as headings they can be scoped to the widget like this: #[code.code widget__title] or #[code.code widget__heading].
      p If there are any modifications to the original widget such as a lighter background color, you can add a modifier to the root class which uses two dashes to signify its relationship: #[code.code widget--light].
      p An example in #[code.code CSS] and #[code.code SCSS] #[strong (Sass 3.2.15 and below)]:

      pre
        code.language-scss
          :code
            .widget { ... }

            .widget__title { ... }

            .widget__body { ... }

            .widget--light { ... }

      p An example in #[code.code SCSS] #[strong (Sass 3.3 and above)]:

      pre
        code.language-scss
          :code
            .widget {
              &__title { ... }

              &__body { ... }

              &--light { ... }
            }

      p The resulting #[code.code HTML] would look like this:

      pre
        code.language-html
          :code
            <div class="widget">
              <p class="widget__title">...</p>
              <p class="widget__body">...</p>
            </div>

      p And with the modifier:

      pre
        code.language-html
          :code
            <div class="widget widget--light">
              <p class="widget__title">...</p>
              <p class="widget__body">...</p>
            </div>

    .doc-section
      h2.secondary-headline.doc-headline Coding Styles

      p This section is optional, but when maintaining stylesheets for a large code base with multiple contributors, it helps to follow some basic guidelines to keep things consistent.

      h3 Coding Style

      ul.padded-list
        li Use two spaces to indent.
        li Each property and value pair gets its own line.
        li Put spaces after #[code.code :] in property declarations.
        li Put spaces before #[code.code {] in rule declarations.
        li Use hex color codes #[code.code #000] unless using rgba.
        li Use #[code.code '//'] for comment blocks (instead of #[code.code '/* */']). #[em.txt-alert Without single quotes, of course].

      p Here is good example syntax:

      pre
        code.language-css
          :code
            .styleguide-format {
              border: 1px solid #0f0;
              color: #000;
              background: rgba(0,0,0,0.5);
            }

      h3.tertiary-headline SCSS Style

      ul.padded-list
        li Any #[code.code $variable] or #[code.code @mixin] that is used in more than one file should be put in the #[code.code _settings.scss] or #[code.code _helpers.scss] depending on their function.
        li Limit nesting as much as possible. Nesting too deep will lead to overly-specific selectors and make overriding them in the future problematic.
        li Always place #[code.code @extend] and #[code.code @include] statements on the first lines of a declaration block.

      p Here is an example:

      pre
        code.language-scss
          :code
            .widget {
              @include clearfix;
              @extend .component; 
              border: 1px solid $border-color;
              background: $background-color;

              a {
                color: $widget-link-color;

                &:hover {
                  color: darken($widget-link-color, 10%);
                }
              }
            }

